{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import csv #나이대1122\n",
    "f=open('marriage.csv',encoding='cp949')\n",
    "data=csv.reader(f)\n",
    "\n",
    "for i in data:\n",
    "    \n",
    "    if '대구' in i[0]:\n",
    "        if '15' in i[1]:\n",
    "            a=i[8:9]\n",
    "            w_a=i[13:14]\n",
    "        if '20' in i[1]:\n",
    "            b=i[8:9]\n",
    "            w_b=i[13:14]\n",
    "        if '25' in i[1]:\n",
    "            c=i[8:9]\n",
    "            w_c=i[13:14]\n",
    "        if '30' in i[1]:\n",
    "            d=i[8:9]\n",
    "            w_d=i[13:14]\n",
    "        if '35' in i[1]:\n",
    "            e=i[8:9]\n",
    "            w_e=i[13:14]\n",
    "        if '40' in i[1]:\n",
    "            f=i[8:9]\n",
    "            w_f=i[13:14]\n",
    "        if '45' in i[1]:\n",
    "            g=i[8:9]\n",
    "            w_g=i[13:14]\n",
    "        if '50' in i[1]:\n",
    "            h=i[8:9]\n",
    "            w_h=i[13:14]\n",
    "        if '55' in i[1]:\n",
    "            j=i[8:9]\n",
    "            w_j=i[13:14]\n",
    "        if '60' in i[1]:\n",
    "            k=i[8:9]\n",
    "            w_k=i[13:14]\n",
    "        if '65' in i[1]:\n",
    "            l=i[8:9]\n",
    "            w_l=i[13:14]\n",
    "        if '70' in i[1]:\n",
    "            m=i[8:9]\n",
    "            w_m=i[13:14]\n",
    "        if '75' in i[1]:\n",
    "            n=i[8:9]\n",
    "            w_n=i[13:14]\n",
    "        if '80' in i[1]:\n",
    "            o=i[8:9]\n",
    "            w_o=i[13:14]\n",
    "        if '85' in i[1]:\n",
    "            p=i[8:9]\n",
    "            w_p=i[13:14]\n",
    "\n",
    "mihon=a+b+c+d+e+f+g+h+j+k+l+m+n+o+p\n",
    "w_mihon=w_a+w_b+w_c+w_d+w_e+w_f+w_g+w_h+w_j+w_k+w_l+w_m+w_n+w_o+w_p\n",
    "mihon=list(map(int,mihon))\n",
    "w_mihon=list(map(int,w_mihon))\n",
    "w_mihon_=[]\n",
    "mihon_=[]\n",
    "for i in mihon:\n",
    "    mihon_.append((i/382456)*100)\n",
    "for i in w_mihon:\n",
    "    w_mihon_.append((i/279398)*100)\n",
    "mihon_age=['15~19','20~24','25~29','30~34','35~39','40~44','45~49','50~54','55~59','60~64','65~69','70~74','75~79','80~84','85']\n",
    "w_mihon_age=['15~19','20~24','25~29','30~34','35~39','40~44','45~49','50~54','55~59','60~64','65~69','70~74','75~79','80~84','85']  \n",
    "dic4 = { name:value for name, value in zip(mihon_age, mihon_) }\n",
    "dic5 = { name:value for name, value in zip(w_mihon_age, w_mihon_) }\n",
    "\n",
    "dic4=list(dic4.values())\n",
    "dic5=list(dic5.values())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[{'계': '32239'}, {'137cm이하': '1'}, {'138-140cm': '-'}, {'141-145cm': '2'}, {'146-150cm': '4'}, {'151-155cm': '45'}, {'156-160cm': '369'}, {'161-165cm': '2474'}, {'166-170cm': '7402'}, {'171-175cm': '11042'}, {'176-180cm': '7508'}, {'181-185cm': '2722'}, {'186-190cm': '568'}, {'191-195cm': '75'}, {'196-200cm': '1'}, {'201cm이상': '1'}]\n",
      "[32239, 1, 2, 4, 45, 369, 2474, 7402, 11042, 7508, 2722, 568, 75, 1]\n"
     ]
    }
   ],
   "source": [
    "import csv #남자 키\n",
    "f = open('men height.csv', encoding = 'cp949') #같은 파일이 아니라면 경로를 써야된다.\n",
    "data1 = csv.reader(f)\n",
    "header = next(data1)\n",
    "\n",
    "bb=[]\n",
    "for i in data1:\n",
    "    a= i[0].split(' ')\n",
    "    #print(a[0],i[4])\n",
    "    #[a[0],i[4]].append(b)\n",
    "    bb.append({a[0]:i[4]})\n",
    "print(bb[1:-5])\n",
    "\n",
    "a=bb[1:-5][0] #총 계\n",
    "a1=list(a.values())\n",
    "\n",
    "b=bb[1:-5][1] #137 이하\n",
    "b1=list(b.values())\n",
    "\n",
    "c=bb[1:-5][2] \n",
    "c1=list(c.values())\n",
    "\n",
    "d=bb[1:-5][3] \n",
    "d1=list(d.values())\n",
    "\n",
    "e=bb[1:-5][4] \n",
    "e1=list(e.values())\n",
    "\n",
    "f=bb[1:-5][5] \n",
    "f1=list(f.values())\n",
    "\n",
    "g=bb[1:-5][6] \n",
    "g1=list(g.values())\n",
    "\n",
    "h=bb[1:-5][7] \n",
    "h1=list(h.values())\n",
    "\n",
    "i=bb[1:-5][8] \n",
    "i1=list(i.values())\n",
    "\n",
    "j=bb[1:-5][9] \n",
    "j1=list(j.values())\n",
    "\n",
    "k=bb[1:-5][10] \n",
    "k1=list(k.values())\n",
    "\n",
    "l=bb[1:-5][11] \n",
    "l1=list(l.values())\n",
    "\n",
    "\n",
    "\n",
    "n=bb[1:-5][12] \n",
    "n1=list(n.values())\n",
    "\n",
    "o=bb[1:-5][13] \n",
    "o1=list(o.values())\n",
    "\n",
    "p=bb[1:-5][14] \n",
    "p1=list(p.values())\n",
    "\n",
    "m=bb[1:-5][15]\n",
    "m1=list(m.values())\n",
    "\n",
    "\n",
    "key1=a1+b1+c1+d1+e1+f1+g1+h1+i1+j1+k1+l1+n1+o1+p1+m1\n",
    "\n",
    "\n",
    "\n",
    "key2=key1[0:2]+key1[3:15]\n",
    "kk=list(map(int,key2))\n",
    "print(kk)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'145.5~150.6': '2.5 ', '150.7~155.8': '14.6 ', '155.9~161.0': '32.6 ', '161.1~166.1': '34.8 ', '166.2~171.3': '12.7 ', '171.4~176.6': '2.8 '}\n",
      "2.5 \n",
      "[2.5, 14.6, 32.6, 34.8, 12.7, 2.8]\n",
      "<class 'float'>\n"
     ]
    }
   ],
   "source": [
    "import csv #여자 키\n",
    "f = open('women height.csv', encoding = 'cp949') #같은 파일이 아니라면 경로를 써야된다.\n",
    "data1 = csv.reader(f)\n",
    "#header = next(data1)\n",
    "\n",
    "bb=[]\n",
    "for i in data1:\n",
    "    a= i\n",
    "    #print(a)\n",
    "    bb.append(a)\n",
    "a1=dict(zip(bb[1][3:9],bb[3][3:9]))\n",
    "c1=list(a1.values())\n",
    "print(a1)\n",
    "print(c1[0])\n",
    "\n",
    "b1=[]\n",
    "for i in c1:\n",
    "    b1.append(float(i))\n",
    "    \n",
    "print(b1)\n",
    "print(type(b1[0]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "중학교: 11.0\n",
      "고등학교: 39.0\n",
      "고등학교이상: 50.0\n"
     ]
    }
   ],
   "source": [
    "import csv #학력\n",
    "f=open('education.csv',encoding='cp949')\n",
    "data=csv.reader(f)\n",
    "header=next(data)\n",
    "\n",
    "a=[]\n",
    "for i in data:\n",
    "    a.append(i)\n",
    "    \n",
    "print('중학교:',a[3][6])\n",
    "print('고등학교:',a[4][6])\n",
    "print('고등학교이상:',a[5][6])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['성 별', '남 자', '5.3', '10.0', '23.8', '29.2', '17.7', '14.0', '0.8', '2.4', '7.6', '27.4', '31.1', '30.7']\n",
      "['성 별', '여 자', '15.5', '25.9', '28.3', '19.4', '7.4', '3.5', '1.0', '5.6', '19.6', '-', '24.7', '13.8']\n",
      "[['5.3', '10.0', '23.8', '29.2', '17.7', '14.0', '0.8', '2.4', '7.6', '27.4', '31.1', '30.7'], ['15.5', '25.9', '28.3', '19.4', '7.4', '3.5', '1.0', '5.6', '19.6', '-', '24.7', '13.8']]\n",
      "<class 'float'>\n",
      "60.9\n"
     ]
    }
   ],
   "source": [
    "f = open('salary.csv', encoding = 'cp949') #연봉\n",
    "data = csv.reader(f)\n",
    "\n",
    "key1='남 자'\n",
    "key2='여 자'\n",
    "\n",
    "for i in data:\n",
    "    if key1 in i[1]:\n",
    "        a=i[-12:]\n",
    "        print(i)\n",
    "    if key2 in i[1]:\n",
    "        b=i[-12:]\n",
    "        print(i)\n",
    "\n",
    "ck=[key1,key2]\n",
    "c=a+b\n",
    "n=12\n",
    "result1 = [c[i * n:(i + 1) * n] for i in range((len(c) - 1 + n) // n )] \n",
    "print(result1)\n",
    "\n",
    "ams1=result1[0][5]#남자 연봉\n",
    "ams2=float(result1[0][4])+float(result1[0][5])\n",
    "ams3=float(result1[0][3])+float(result1[0][4])+float(result1[0][5])\n",
    "\n",
    "aws1=result1[1][5]#여자 연봉\n",
    "aws2=float(result1[1][4])+float(result1[1][5])\n",
    "aws3=float(result1[1][3])+float(result1[1][4])+float(result1[1][5])\n",
    "\n",
    "ms1=float(ams1)\n",
    "ms2=float(ams2)\n",
    "ms3=float(ams3)\n",
    "\n",
    "ws1=float(aws1)\n",
    "ws2=float(aws2)\n",
    "ws3=float(aws3)\n",
    "dic = { name:value for name, value in zip(ck, result1) }\n",
    "#print(dic)\n",
    "#f.close()\n",
    "\n",
    "\n",
    "print(type(ws1))\n",
    "\n",
    "print(ams3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "남 운동_유 40.3 남 운동_무 59.7 여 운동_유 38.7 여 운동_무 61.3\n",
      "[40.3, 59.7, 38.7, 61.3]\n"
     ]
    }
   ],
   "source": [
    "import csv #운동여부\n",
    "\n",
    "f = open('exercise.csv', encoding = 'cp949')\n",
    "data = csv.reader(f)\n",
    "key1='대구'\n",
    "key2='남자'\n",
    "key3='여자'\n",
    "for i in data:\n",
    "    if key1 in i[0]:\n",
    "        if key2 in i[2]:\n",
    "            a=i[-2:]\n",
    "            #print(i)\n",
    "        if key3 in i[2]:\n",
    "            b=i[-2:]\n",
    "            #print(i)\n",
    "\n",
    "ck=[key2,key3]\n",
    "c=a+b\n",
    "\n",
    "n=2\n",
    "result1 = [c[i * n:(i + 1) * n] for i in range((len(c) - 1 + n) // n )] \n",
    "#print(result1)\n",
    "\n",
    "dic = { name:value for name, value in zip(ck, result1) }\n",
    "\n",
    "print('남 운동_유',c[0],'남 운동_무',c[1],'여 운동_유',c[2],'여 운동_무',c[3])\n",
    "#print(dic)\n",
    "#f.close()\n",
    "\n",
    "a=c[0]\n",
    "\n",
    "exx=list(map(float,c))\n",
    "\n",
    "print(exx)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['대구광역시', '건강', '흡연율 (%)', '20.8', '21.7', '19.8', '-']\n",
      "19.8\n"
     ]
    }
   ],
   "source": [
    "f = open('etc.csv', encoding = 'cp949') #흡연율\n",
    "data = csv.reader(f)\n",
    "\n",
    "key1='흡연율'\n",
    "key2='비흡연율'\n",
    "for i in data:\n",
    "    if '흡연율' in i[2]:\n",
    "        a=i[-2:-1]\n",
    "        print(i)\n",
    "a = list(map(float, a))\n",
    "b=100-a[0]        \n",
    "smoke=[key1,key2]\n",
    "non_smoke=[a[0],b]\n",
    "dic8 = { name:value for name, value in zip(smoke, non_smoke) }\n",
    "list_dic4=list(dic8.values())\n",
    "\n",
    "print(list_dic4[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "음주 비율\n",
      "58.6\n"
     ]
    }
   ],
   "source": [
    "import csv #음주비율\n",
    "f=open('acholo.csv',encoding='cp949')\n",
    "data=csv.reader(f)\n",
    "key1='대구'\n",
    "print('음주 비율')\n",
    "for i in data:\n",
    "    if key1 in i[0]:\n",
    "        alcohol=i[-1]\n",
    "        \n",
    "alcohol1=float(alcohol)\n",
    "print(alcohol1)\n",
    "#f.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['계', '소계', '1585638', '65907', '9028', '11681', '13503', '14249', '17446', '1516477', '20259', '18026', '118801', '131970', '123442', '156540', '155689', '192774', '184847', '180686', '116263', '58659', '58521', '3254']\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "{'범죄를 저지를 확률': 3.1712759999999998, '범죄를 안저지를 확률': 96.828724}"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "f = open('crime.csv', encoding = 'cp949')\n",
    "data = csv.reader(f)\n",
    "\n",
    "for i in data:\n",
    "    if '계' in i[0]:\n",
    "        a=i[2:3]\n",
    "        print(i)\n",
    "d=['범죄를 저지를 확률','범죄를 안저지를 확률']\n",
    "f=[]\n",
    "a = list(map(int, a))\n",
    "\n",
    "\n",
    "c=(a[0]/50000000*100)\n",
    "b=100-(c)\n",
    "f=[c,b]\n",
    "\n",
    "dic3 = { name:value for name, value in zip(d, f) }\n",
    "crime_=list(map(int,dic3.values()))\n",
    "\n",
    "\n",
    "dic3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>.container { width:10000% !important; }</style>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "from IPython.core.display import display, HTML\n",
    "display(HTML(\"<style>.container { width:10000% !important; }</style>\"))\n",
    "class Condition():\n",
    "    def mage(self):\n",
    "        print(\"희망하는 배우자 남성의 나이 대를 선택하세요.\")\n",
    "        s=int(input('몇 살 부터(20살 이상) : '))\n",
    "        s_1=int(input('몇 살 까지 : '))\n",
    "        if 15<= s <=19:\n",
    "            if s_1<=19:\n",
    "                    return dic4[0]\n",
    "            if 20 <= s_1 <= 24:\n",
    "                    return dic4[0]+dic4[1]\n",
    "            if 25 <= s_1 <= 29:\n",
    "                    return dic4[0]+dic4[1]+dic4[2]\n",
    "            if 30 <= s_1 <= 34:\n",
    "                    return dic4[0]+dic4[1]+dic4[2]+dic4[3]\n",
    "            if 35 <= s_1 <= 39:\n",
    "                    return dic4[0]+dic4[1]+dic4[2]+dic4[3]+dic4[4]\n",
    "            if 40 <= s_1 <= 44:\n",
    "                    return dic4[0]+dic4[1]+dic4[2]+dic4[3]+dic4[4]+dic4[5]\n",
    "            if 45 <= s_1 <= 49:\n",
    "                    return dic4[0]+dic4[1]+dic4[2]+dic4[3]+dic4[4]+dic4[5]+dic4[6]\n",
    "            if 50 <= s_1 <= 54:\n",
    "                    return dic4[0]+dic4[1]+dic4[2]+dic4[3]+dic4[4]+dic4[5]+dic4[6]+dic4[7]\n",
    "            if 55 <= s_1 <= 59:\n",
    "                    return dic4[0]+dic4[1]+dic4[2]+dic4[3]+dic4[4]+dic4[5]+dic4[6]+dic4[7]+dic4[8]\n",
    "            if 60 <= s_1 <= 64:\n",
    "                    return dic4[0]+dic4[1]+dic4[2]+dic4[3]+dic4[4]+dic4[5]+dic4[6]+dic4[7]+dic4[8]+dic4[9]\n",
    "            if 65 <= s_1 <= 69:\n",
    "                    return dic4[0]+dic4[1]+dic4[2]+dic4[3]+dic4[4]+dic4[5]+dic4[6]+dic4[7]+dic4[8]+dic4[9]+dic4[10]\n",
    "            if 70 <= s_1 <= 74:\n",
    "                    return dic4[0]+dic4[1]+dic4[2]+dic4[3]+dic4[4]+dic4[5]+dic4[6]+dic4[7]+dic4[8]+dic4[9]+dic4[10]+dic4[11]\n",
    "            if 75 <= s_1 <= 79:\n",
    "                    return dic4[0]+dic4[1]+dic4[2]+dic4[3]+dic4[4]+dic4[5]+dic4[6]+dic4[7]+dic4[8]+dic4[9]+dic4[10]+dic4[11]+dic4[12]\n",
    "            if 80 <= s_1 <= 84:\n",
    "                    return dic4[0]+dic4[1]+dic4[2]+dic4[3]+dic4[4]+dic4[5]+dic4[6]+dic4[7]+dic4[8]+dic4[9]+dic4[10]+dic4[11]+dic4[12]+dic4[13]\n",
    "            if 85 <= s_1:\n",
    "                    return dic4[0]+dic4[1]+dic4[2]+dic4[3]+dic4[4]+dic4[5]+dic4[6]+dic4[7]+dic4[8]+dic4[9]+dic4[10]+dic4[11]+dic4[12]+dic4[13]+dic4[14]    \n",
    "        if 20<= s <=24:\n",
    "            if 20 <= s_1 <= 24:\n",
    "                    return dic4[1]\n",
    "            if 25 <= s_1 <= 29:\n",
    "                    return dic4[1]+dic4[2]\n",
    "            if 30 <= s_1 <= 34:\n",
    "                    return dic4[1]+dic4[2]+dic4[3]\n",
    "            if 35 <= s_1 <= 39:\n",
    "                    return dic4[1]+dic4[2]+dic4[3]+dic4[4]\n",
    "            if 40 <= s_1 <= 44:\n",
    "                    return dic4[1]+dic4[2]+dic4[3]+dic4[4]+dic4[5]\n",
    "            if 45 <= s_1 <= 49:\n",
    "                    return dic4[1]+dic4[2]+dic4[3]+dic4[4]+dic4[5]+dic4[6]\n",
    "            if 50 <= s_1 <= 54:\n",
    "                    return dic4[1]+dic4[2]+dic4[3]+dic4[4]+dic4[5]+dic4[6]+dic4[7]\n",
    "            if 55 <= s_1 <= 59:\n",
    "                    return dic4[1]+dic4[2]+dic4[3]+dic4[4]+dic4[5]+dic4[6]+dic4[7]+dic4[8]\n",
    "            if 60 <= s_1 <= 64:\n",
    "                    return dic4[1]+dic4[2]+dic4[3]+dic4[4]+dic4[5]+dic4[6]+dic4[7]+dic4[8]+dic4[9]\n",
    "            if 65 <= s_1 <= 69:\n",
    "                    return dic4[1]+dic4[2]+dic4[3]+dic4[4]+dic4[5]+dic4[6]+dic4[7]+dic4[8]+dic4[9]+dic4[10]\n",
    "            if 70 <= s_1 <= 74:\n",
    "                    return dic4[1]+dic4[2]+dic4[3]+dic4[4]+dic4[5]+dic4[6]+dic4[7]+dic4[8]+dic4[9]+dic4[10]+dic4[11]\n",
    "            if 75 <= s_1 <= 79:\n",
    "                    return dic4[1]+dic4[2]+dic4[3]+dic4[4]+dic4[5]+dic4[6]+dic4[7]+dic4[8]+dic4[9]+dic4[10]+dic4[11]+dic4[12]\n",
    "            if 80 <= s_1 <= 84:\n",
    "                    return dic4[1]+dic4[2]+dic4[3]+dic4[4]+dic4[5]+dic4[6]+dic4[7]+dic4[8]+dic4[9]+dic4[10]+dic4[11]+dic4[12]+dic4[13]\n",
    "            if 85 <= s_1:\n",
    "                    return dic4[1]+dic4[2]+dic4[3]+dic4[4]+dic4[5]+dic4[6]+dic4[7]+dic4[8]+dic4[9]+dic4[10]+dic4[11]+dic4[12]+dic4[13]+dic4[14]    \n",
    "        if 25<= s <=29:\n",
    "            if 25 <= s_1 <= 29:\n",
    "                    return dic4[2]\n",
    "            if 30 <= s_1 <= 34:\n",
    "                    return dic4[2]+dic4[3]\n",
    "            if 35 <= s_1 <= 39:\n",
    "                    return dic4[2]+dic4[3]+dic4[4]\n",
    "            if 40 <= s_1 <= 44:\n",
    "                    return dic4[2]+dic4[3]+dic4[4]+dic4[5]\n",
    "            if 45 <= s_1 <= 49:\n",
    "                    return dic4[2]+dic4[3]+dic4[4]+dic4[5]+dic4[6]\n",
    "            if 50 <= s_1 <= 54:\n",
    "                    return dic4[2]+dic4[3]+dic4[4]+dic4[5]+dic4[6]+dic4[7]\n",
    "            if 55 <= s_1 <= 59:\n",
    "                    return dic4[2]+dic4[3]+dic4[4]+dic4[5]+dic4[6]+dic4[7]+dic4[8]\n",
    "            if 60 <= s_1 <= 64:\n",
    "                    return dic4[2]+dic4[3]+dic4[4]+dic4[5]+dic4[6]+dic4[7]+dic4[8]+dic4[9]\n",
    "            if 65 <= s_1 <= 69:\n",
    "                    return dic4[2]+dic4[3]+dic4[4]+dic4[5]+dic4[6]+dic4[7]+dic4[8]+dic4[9]+dic4[10]\n",
    "            if 70 <= s_1 <= 74:\n",
    "                    return dic4[2]+dic4[3]+dic4[4]+dic4[5]+dic4[6]+dic4[7]+dic4[8]+dic4[9]+dic4[10]+dic4[11]\n",
    "            if 75 <= s_1 <= 79:\n",
    "                    return dic4[2]+dic4[3]+dic4[4]+dic4[5]+dic4[6]+dic4[7]+dic4[8]+dic4[9]+dic4[10]+dic4[11]+dic4[12]\n",
    "            if 80 <= s_1 <= 84:\n",
    "                    return dic4[2]+dic4[3]+dic4[4]+dic4[5]+dic4[6]+dic4[7]+dic4[8]+dic4[9]+dic4[10]+dic4[11]+dic4[12]+dic4[13]\n",
    "            if 85 <= s_1:\n",
    "                    return dic4[2]+dic4[3]+dic4[4]+dic4[5]+dic4[6]+dic4[7]+dic4[8]+dic4[9]+dic4[10]+dic4[11]+dic4[12]+dic4[13]+dic4[14]    \n",
    "        if 30<= s <=34:\n",
    "            if 30 <= s_1 <= 34:\n",
    "                    return dic4[3]\n",
    "            if 35 <= s_1 <= 39:\n",
    "                    return dic4[3]+dic4[4]\n",
    "            if 40 <= s_1 <= 44:\n",
    "                    return dic4[3]+dic4[4]+dic4[5]\n",
    "            if 45 <= s_1 <= 49:\n",
    "                    return dic4[3]+dic4[4]+dic4[5]+dic4[6]\n",
    "            if 50 <= s_1 <= 54:\n",
    "                    return dic4[3]+dic4[4]+dic4[5]+dic4[6]+dic4[7]\n",
    "            if 55 <= s_1 <= 59:\n",
    "                    return dic4[3]+dic4[4]+dic4[5]+dic4[6]+dic4[7]+dic4[8]\n",
    "            if 60 <= s_1 <= 64:\n",
    "                    return dic4[3]+dic4[4]+dic4[5]+dic4[6]+dic4[7]+dic4[8]+dic4[9]\n",
    "            if 65 <= s_1 <= 69:\n",
    "                    return dic4[3]+dic4[4]+dic4[5]+dic4[6]+dic4[7]+dic4[8]+dic4[9]+dic4[10]\n",
    "            if 70 <= s_1 <= 74:\n",
    "                    return dic4[3]+dic4[4]+dic4[5]+dic4[6]+dic4[7]+dic4[8]+dic4[9]+dic4[10]+dic4[11]\n",
    "            if 75 <= s_1 <= 79:\n",
    "                    return dic4[3]+dic4[4]+dic4[5]+dic4[6]+dic4[7]+dic4[8]+dic4[9]+dic4[10]+dic4[11]+dic4[12]\n",
    "            if 80 <= s_1 <= 84:\n",
    "                    return dic4[3]+dic4[4]+dic4[5]+dic4[6]+dic4[7]+dic4[8]+dic4[9]+dic4[10]+dic4[11]+dic4[12]+dic4[13]\n",
    "            if 85 <= s_1:\n",
    "                    return dic4[3]+dic4[4]+dic4[5]+dic4[6]+dic4[7]+dic4[8]+dic4[9]+dic4[10]+dic4[11]+dic4[12]+dic4[13]+dic4[14]    \n",
    "        if 35<= s <=39:\n",
    "            if 35 <= s_1 <= 39:\n",
    "                    return dic4[4]\n",
    "            if 40 <= s_1 <= 44:\n",
    "                    return dic4[4]+dic4[5]\n",
    "            if 45 <= s_1 <= 49:\n",
    "                    return dic4[4]+dic4[5]+dic4[6]\n",
    "            if 50 <= s_1 <= 54:\n",
    "                    return dic4[4]+dic4[5]+dic4[6]+dic4[7]\n",
    "            if 55 <= s_1 <= 59:\n",
    "                    return dic4[4]+dic4[5]+dic4[6]+dic4[7]+dic4[8]\n",
    "            if 60 <= s_1 <= 64:\n",
    "                    return dic4[4]+dic4[5]+dic4[6]+dic4[7]+dic4[8]+dic4[9]\n",
    "            if 65 <= s_1 <= 69:\n",
    "                    return dic4[4]+dic4[5]+dic4[6]+dic4[7]+dic4[8]+dic4[9]+dic4[10]\n",
    "            if 70 <= s_1 <= 74:\n",
    "                    return dic4[4]+dic4[5]+dic4[6]+dic4[7]+dic4[8]+dic4[9]+dic4[10]+dic4[11]\n",
    "            if 75 <= s_1 <= 79:\n",
    "                    return dic4[4]+dic4[5]+dic4[6]+dic4[7]+dic4[8]+dic4[9]+dic4[10]+dic4[11]+dic4[12]\n",
    "            if 80 <= s_1 <= 84:\n",
    "                    return dic4[4]+dic4[5]+dic4[6]+dic4[7]+dic4[8]+dic4[9]+dic4[10]+dic4[11]+dic4[12]+dic4[13]\n",
    "            if 85 <= s_1:\n",
    "                    return dic4[4]+dic4[5]+dic4[6]+dic4[7]+dic4[8]+dic4[9]+dic4[10]+dic4[11]+dic4[12]+dic4[13]+dic4[14]    \n",
    "        if 40<= s <= 44:\n",
    "            if 40 <= s_1 <= 44:\n",
    "                    return dic4[5]\n",
    "            if 45 <= s_1 <= 49:\n",
    "                    return dic4[5]+dic4[6]\n",
    "            if 50 <= s_1 <= 54:\n",
    "                    return dic4[5]+dic4[6]+dic4[7]\n",
    "            if 55 <= s_1 <= 59:\n",
    "                    return dic4[5]+dic4[6]+dic4[7]+dic4[8]\n",
    "            if 60 <= s_1 <= 64:\n",
    "                    return dic4[5]+dic4[6]+dic4[7]+dic4[8]+dic4[9]\n",
    "            if 65 <= s_1 <= 69:\n",
    "                    return dic4[5]+dic4[6]+dic4[7]+dic4[8]+dic4[9]+dic4[10]\n",
    "            if 70 <= s_1 <= 74:\n",
    "                    return dic4[5]+dic4[6]+dic4[7]+dic4[8]+dic4[9]+dic4[10]+dic4[11]\n",
    "            if 75 <= s_1 <= 79:\n",
    "                    return dic4[5]+dic4[6]+dic4[7]+dic4[8]+dic4[9]+dic4[10]+dic4[11]+dic4[12]\n",
    "            if 80 <= s_1 <= 84:\n",
    "                    return dic4[5]+dic4[6]+dic4[7]+dic4[8]+dic4[9]+dic4[10]+dic4[11]+dic4[12]+dic4[13]\n",
    "            if 85 <= s_1:\n",
    "                    return dic4[5]+dic4[6]+dic4[7]+dic4[8]+dic4[9]+dic4[10]+dic4[11]+dic4[12]+dic4[13]+dic4[14]    \n",
    "        if 45<= s <=49:\n",
    "            if 45 <= s_1 <= 49:\n",
    "                    return dic4[6]\n",
    "            if 50 <= s_1 <= 54:\n",
    "                    return dic4[6]+dic4[7]\n",
    "            if 55 <= s_1 <= 59:\n",
    "                    return dic4[6]+dic4[7]+dic4[8]\n",
    "            if 60 <= s_1 <= 64:\n",
    "                    return dic4[6]+dic4[7]+dic4[8]+dic4[9]\n",
    "            if 65 <= s_1 <= 69:\n",
    "                    return dic4[6]+dic4[7]+dic4[8]+dic4[9]+dic4[10]\n",
    "            if 70 <= s_1 <= 74:\n",
    "                    return dic4[6]+dic4[7]+dic4[8]+dic4[9]+dic4[10]+dic4[11]\n",
    "            if 75 <= s_1 <= 79:\n",
    "                    return dic4[6]+dic4[7]+dic4[8]+dic4[9]+dic4[10]+dic4[11]+dic4[12]\n",
    "            if 80 <= s_1 <= 84:\n",
    "                    return dic4[6]+dic4[7]+dic4[8]+dic4[9]+dic4[10]+dic4[11]+dic4[12]+dic4[13]\n",
    "            if 85 <= s_1:\n",
    "                    return dic4[6]+dic4[7]+dic4[8]+dic4[9]+dic4[10]+dic4[11]+dic4[12]+dic4[13]+dic4[14]    \n",
    "        if 50<= s <=54:\n",
    "            if 50 <= s_1 <= 54:\n",
    "                    return dic4[7]\n",
    "            if 55 <= s_1 <= 59:\n",
    "                    return dic4[7]+dic4[8]\n",
    "            if 60 <= s_1 <= 64:\n",
    "                    return dic4[7]+dic4[8]+dic4[9]\n",
    "            if 65 <= s_1 <= 69:\n",
    "                    return dic4[7]+dic4[8]+dic4[9]+dic4[10]\n",
    "            if 70 <= s_1 <= 74:\n",
    "                    return dic4[7]+dic4[8]+dic4[9]+dic4[10]+dic4[11]\n",
    "            if 75 <= s_1 <= 79:\n",
    "                    return dic4[7]+dic4[8]+dic4[9]+dic4[10]+dic4[11]+dic4[12]\n",
    "            if 80 <= s_1 <= 84:\n",
    "                    return dic4[7]+dic4[8]+dic4[9]+dic4[10]+dic4[11]+dic4[12]+dic4[13]\n",
    "            if 85 <= s_1:\n",
    "                    return dic4[7]+dic4[8]+dic4[9]+dic4[10]+dic4[11]+dic4[12]+dic4[13]+dic4[14]    \n",
    "        if 55<= s <=59:\n",
    "            if 55 <= s_1 <= 59:\n",
    "                    return dic4[8]\n",
    "            if 60 <= s_1 <= 64:\n",
    "                    return dic4[8]+dic4[9]\n",
    "            if 65 <= s_1 <= 69:\n",
    "                    return dic4[8]+dic4[9]+dic4[10]\n",
    "            if 70 <= s_1 <= 74:\n",
    "                    return dic4[8]+dic4[9]+dic4[10]+dic4[11]\n",
    "            if 75 <= s_1 <= 79:\n",
    "                    return dic4[8]+dic4[9]+dic4[10]+dic4[11]+dic4[12]\n",
    "            if 80 <= s_1 <= 84:\n",
    "                    return dic4[8]+dic4[9]+dic4[10]+dic4[11]+dic4[12]+dic4[13]\n",
    "            if 85 <= s_1:\n",
    "                    return dic4[8]+dic4[9]+dic4[10]+dic4[11]+dic4[12]+dic4[13]+dic4[14]    \n",
    "        if 60<= s <=64:\n",
    "            if 60 <= s_1 <= 64:\n",
    "                    return dic4[9]\n",
    "            if 65 <= s_1 <= 69:\n",
    "                    return dic4[9]+dic4[10]\n",
    "            if 70 <= s_1 <= 74:\n",
    "                    return dic4[9]+dic4[10]+dic4[11]\n",
    "            if 75 <= s_1 <= 79:\n",
    "                    return dic4[9]+dic4[10]+dic4[11]+dic4[12]\n",
    "            if 80 <= s_1 <= 84:\n",
    "                    return dic4[9]+dic4[10]+dic4[11]+dic4[12]+dic4[13]\n",
    "            if 85 <= s_1:\n",
    "                    return dic4[9]+dic4[10]+dic4[11]+dic4[12]+dic4[13]+dic4[14]    \n",
    "        if 65<= s <=69:\n",
    "            if 65 <= s_1 <= 69:\n",
    "                    return dic4[10]\n",
    "            if 70 <= s_1 <= 74:\n",
    "                    return dic4[10]+dic4[11]\n",
    "            if 75 <= s_1 <= 79:\n",
    "                    return dic4[10]+dic4[11]+dic4[12]\n",
    "            if 80 <= s_1 <= 84:\n",
    "                    return dic4[10]+dic4[11]+dic4[12]+dic4[13]\n",
    "            if 85 <= s_1:\n",
    "                    return dic4[10]+dic4[11]+dic4[12]+dic4[13]+dic4[14]    \n",
    "        if 70<= s <=74:\n",
    "            if 70 <= s_1 <= 74:\n",
    "                    return dic4[11]\n",
    "            if 75 <= s_1 <= 79:\n",
    "                    return dic4[11]+dic4[12]\n",
    "            if 80 <= s_1 <= 84:\n",
    "                    return dic4[11]+dic4[12]+dic4[13]\n",
    "            if 85 <= s_1:\n",
    "                    return dic4[11]+dic4[12]+dic4[13]+dic4[14]    \n",
    "        if 75<= s <=79:\n",
    "            if 75 <= s_1 <= 79:\n",
    "                    return dic4[12]\n",
    "            if 80 <= s_1 <= 84:\n",
    "                    return dic4[12]+dic4[13]\n",
    "            if 85 <= s_1:\n",
    "                    return dic4[12]+dic4[13]+dic4[14]    \n",
    "        if 80<= s <=84:\n",
    "            if 80 <= s_1 <= 84:\n",
    "                    return dic4[13]\n",
    "            if 85 <= s_1:\n",
    "                    return dic4[13]+dic4[14]    \n",
    "        if 85<=s:\n",
    "            if 85 <= s_1:\n",
    "                    return dic4[14]    \n",
    "            \n",
    "        \n",
    "    def wage(self):\n",
    "        print(\"희망하는 배우자 여성의 나이 대를 선택하세요.\")\n",
    "        s=int(input('몇 살 부터(20살 이상) : '))\n",
    "        s_1=int(input('몇 살 까지 : '))\n",
    "        if 15<= s <=19:\n",
    "            if s_1<=19:\n",
    "                    return dic5[0]\n",
    "            if 20 <= s_1 <= 24:\n",
    "                    return dic5[0]+dic5[1]\n",
    "            if 25 <= s_1 <= 29:\n",
    "                    return dic5[0]+dic5[1]+dic5[2]\n",
    "            if 30 <= s_1 <= 34:\n",
    "                    return dic5[0]+dic5[1]+dic5[2]+dic5[3]\n",
    "            if 35 <= s_1 <= 39:\n",
    "                    return dic5[0]+dic5[1]+dic5[2]+dic5[3]+dic5[4]\n",
    "            if 40 <= s_1 <= 44:\n",
    "                    return dic5[0]+dic5[1]+dic5[2]+dic5[3]+dic5[4]+dic5[5]\n",
    "            if 45 <= s_1 <= 49:\n",
    "                    return dic5[0]+dic5[1]+dic5[2]+dic5[3]+dic5[4]+dic5[5]+dic5[6]\n",
    "            if 50 <= s_1 <= 54:\n",
    "                    return dic5[0]+dic5[1]+dic5[2]+dic5[3]+dic5[4]+dic5[5]+dic5[6]+dic5[7]\n",
    "            if 55 <= s_1 <= 59:\n",
    "                    return dic5[0]+dic5[1]+dic5[2]+dic5[3]+dic5[4]+dic5[5]+dic5[6]+dic5[7]+dic5[8]\n",
    "            if 60 <= s_1 <= 64:\n",
    "                    return dic5[0]+dic5[1]+dic5[2]+dic5[3]+dic5[4]+dic5[5]+dic5[6]+dic5[7]+dic5[8]+dic5[9]\n",
    "            if 65 <= s_1 <= 69:\n",
    "                    return dic5[0]+dic5[1]+dic5[2]+dic5[3]+dic5[4]+dic5[5]+dic5[6]+dic5[7]+dic5[8]+dic5[9]+dic5[10]\n",
    "            if 70 <= s_1 <= 74:\n",
    "                    return dic5[0]+dic5[1]+dic5[2]+dic5[3]+dic5[4]+dic5[5]+dic5[6]+dic5[7]+dic5[8]+dic5[9]+dic5[10]+dic5[11]\n",
    "            if 75 <= s_1 <= 79:\n",
    "                    return dic5[0]+dic5[1]+dic5[2]+dic5[3]+dic5[4]+dic5[5]+dic5[6]+dic5[7]+dic5[8]+dic5[9]+dic5[10]+dic5[11]+dic5[12]\n",
    "            if 80 <= s_1 <= 84:\n",
    "                    return dic5[0]+dic5[1]+dic5[2]+dic5[3]+dic5[4]+dic5[5]+dic5[6]+dic5[7]+dic5[8]+dic5[9]+dic5[10]+dic5[11]+dic5[12]+dic5[13]\n",
    "            if 85 <= s_1:\n",
    "                    return dic5[0]+dic5[1]+dic5[2]+dic5[3]+dic5[4]+dic5[5]+dic5[6]+dic5[7]+dic5[8]+dic5[9]+dic5[10]+dic5[11]+dic5[12]+dic5[13]+dic5[14]  \n",
    "        if 20<= s <=24:\n",
    "            if 20 <= s_1 <= 24:\n",
    "                    return dic5[1]\n",
    "            if 25 <= s_1 <= 29:\n",
    "                    return dic5[1]+dic5[2]\n",
    "            if 30 <= s_1 <= 34:\n",
    "                    return dic5[1]+dic5[2]+dic5[3]\n",
    "            if 35 <= s_1 <= 39:\n",
    "                    return dic5[1]+dic5[2]+dic5[3]+dic5[4]\n",
    "            if 40 <= s_1 <= 44:\n",
    "                    return dic5[1]+dic5[2]+dic5[3]+dic5[4]+dic5[5]\n",
    "            if 45 <= s_1 <= 49:\n",
    "                    return dic5[1]+dic5[2]+dic5[3]+dic5[4]+dic5[5]+dic5[6]\n",
    "            if 50 <= s_1 <= 54:\n",
    "                    return dic5[1]+dic5[2]+dic5[3]+dic5[4]+dic5[5]+dic5[6]+dic5[7]\n",
    "            if 55 <= s_1 <= 59:\n",
    "                    return dic5[1]+dic5[2]+dic5[3]+dic5[4]+dic5[5]+dic5[6]+dic5[7]+dic5[8]\n",
    "            if 60 <= s_1 <= 64:\n",
    "                    return dic5[1]+dic5[2]+dic5[3]+dic5[4]+dic5[5]+dic5[6]+dic5[7]+dic5[8]+dic5[9]\n",
    "            if 65 <= s_1 <= 69:\n",
    "                    return dic5[1]+dic5[2]+dic5[3]+dic5[4]+dic5[5]+dic5[6]+dic5[7]+dic5[8]+dic5[9]+dic5[10]\n",
    "            if 70 <= s_1 <= 74:\n",
    "                    return dic5[1]+dic5[2]+dic5[3]+dic5[4]+dic5[5]+dic5[6]+dic5[7]+dic5[8]+dic5[9]+dic5[10]+dic5[11]\n",
    "            if 75 <= s_1 <= 79:\n",
    "                    return dic5[1]+dic5[2]+dic5[3]+dic5[4]+dic5[5]+dic5[6]+dic5[7]+dic5[8]+dic5[9]+dic5[10]+dic5[11]+dic5[12]\n",
    "            if 80 <= s_1 <= 84:\n",
    "                    return dic5[1]+dic5[2]+dic5[3]+dic5[4]+dic5[5]+dic5[6]+dic5[7]+dic5[8]+dic5[9]+dic5[10]+dic5[11]+dic5[12]+dic5[13]\n",
    "            if 85 <= s_1:\n",
    "                    return dic5[1]+dic5[2]+dic5[3]+dic5[4]+dic5[5]+dic5[6]+dic5[7]+dic5[8]+dic5[9]+dic5[10]+dic5[11]+dic5[12]+dic5[13]+dic5[14]\n",
    "            \n",
    "        if 25<= s <=29:\n",
    "            if 25 <= s_1 <= 29:\n",
    "                    return dic5[2]\n",
    "            if 30 <= s_1 <= 34:\n",
    "                    return dic5[2]+dic5[3]\n",
    "            if 35 <= s_1 <= 39:\n",
    "                    return dic5[2]+dic5[3]+dic5[4]\n",
    "            if 40 <= s_1 <= 44:\n",
    "                    return dic5[2]+dic5[3]+dic5[4]+dic5[5]\n",
    "            if 45 <= s_1 <= 49:\n",
    "                    return dic5[2]+dic5[3]+dic5[4]+dic5[5]+dic5[6]\n",
    "            if 50 <= s_1 <= 54:\n",
    "                    return dic5[2]+dic5[3]+dic5[4]+dic5[5]+dic5[6]+dic5[7]\n",
    "            if 55 <= s_1 <= 59:\n",
    "                    return dic5[2]+dic5[3]+dic5[4]+dic5[5]+dic5[6]+dic5[7]+dic5[8]\n",
    "            if 60 <= s_1 <= 64:\n",
    "                    return dic5[2]+dic5[3]+dic5[4]+dic5[5]+dic5[6]+dic5[7]+dic5[8]+dic5[9]\n",
    "            if 65 <= s_1 <= 69:\n",
    "                    return dic5[2]+dic5[3]+dic5[4]+dic5[5]+dic5[6]+dic5[7]+dic5[8]+dic5[9]+dic5[10]\n",
    "            if 70 <= s_1 <= 74:\n",
    "                    return dic5[2]+dic5[3]+dic5[4]+dic5[5]+dic5[6]+dic5[7]+dic5[8]+dic5[9]+dic5[10]+dic5[11]\n",
    "            if 75 <= s_1 <= 79:\n",
    "                    return dic5[2]+dic5[3]+dic5[4]+dic5[5]+dic5[6]+dic5[7]+dic5[8]+dic5[9]+dic5[10]+dic5[11]+dic5[12]\n",
    "            if 80 <= s_1 <= 84:\n",
    "                    return dic5[2]+dic5[3]+dic5[4]+dic5[5]+dic5[6]+dic5[7]+dic5[8]+dic5[9]+dic5[10]+dic5[11]+dic5[12]+dic5[13]\n",
    "            if 85 <= s_1:\n",
    "                    return dic5[2]+dic5[3]+dic5[4]+dic5[5]+dic5[6]+dic5[7]+dic5[8]+dic5[9]+dic5[10]+dic5[11]+dic5[12]+dic5[13]+dic5[14]\n",
    "        \n",
    "        if 30<= s <=34:\n",
    "            if 30 <= s_1 <= 34:\n",
    "                    return dic5[3]\n",
    "            if 35 <= s_1 <= 39:\n",
    "                    return dic5[3]+dic5[4]\n",
    "            if 40 <= s_1 <= 44:\n",
    "                    return dic5[3]+dic5[4]+dic5[5]\n",
    "            if 45 <= s_1 <= 49:\n",
    "                    return dic5[3]+dic5[4]+dic5[5]+dic5[6]\n",
    "            if 50 <= s_1 <= 54:\n",
    "                    return dic5[3]+dic5[4]+dic5[5]+dic5[6]+dic5[7]\n",
    "            if 55 <= s_1 <= 59:\n",
    "                    return dic5[3]+dic5[4]+dic5[5]+dic5[6]+dic5[7]+dic5[8]\n",
    "            if 60 <= s_1 <= 64:\n",
    "                    return dic5[3]+dic5[4]+dic5[5]+dic5[6]+dic5[7]+dic5[8]+dic5[9]\n",
    "            if 65 <= s_1 <= 69:\n",
    "                    return dic5[3]+dic5[4]+dic5[5]+dic5[6]+dic5[7]+dic5[8]+dic5[9]+dic5[10]\n",
    "            if 70 <= s_1 <= 74:\n",
    "                    return dic5[3]+dic5[4]+dic5[5]+dic5[6]+dic5[7]+dic5[8]+dic5[9]+dic5[10]+dic5[11]\n",
    "            if 75 <= s_1 <= 79:\n",
    "                    return dic5[3]+dic5[4]+dic5[5]+dic5[6]+dic5[7]+dic5[8]+dic5[9]+dic5[10]+dic5[11]+dic5[12]\n",
    "            if 80 <= s_1 <= 84:\n",
    "                    return dic5[3]+dic5[4]+dic5[5]+dic5[6]+dic5[7]+dic5[8]+dic5[9]+dic5[10]+dic5[11]+dic5[12]+dic5[13]\n",
    "            if 85 <= s_1:\n",
    "                    return dic5[3]+dic5[4]+dic5[5]+dic5[6]+dic5[7]+dic5[8]+dic5[9]+dic5[10]+dic5[11]+dic5[12]+dic5[13]+dic5[14]\n",
    "        if 35<= s <=39: \n",
    "            if 35 <= s_1 <= 39:\n",
    "                    return dic5[4]\n",
    "            if 40 <= s_1 <= 44:\n",
    "                    return dic5[4]+dic5[5]\n",
    "            if 45 <= s_1 <= 49:\n",
    "                    return dic5[4]+dic5[5]+dic5[6]\n",
    "            if 50 <= s_1 <= 54:\n",
    "                    return dic5[4]+dic5[5]+dic5[6]+dic5[7]\n",
    "            if 55 <= s_1 <= 59:\n",
    "                    return dic5[4]+dic5[5]+dic5[6]+dic5[7]+dic5[8]\n",
    "            if 60 <= s_1 <= 64:\n",
    "                    return dic5[4]+dic5[5]+dic5[6]+dic5[7]+dic5[8]+dic5[9]\n",
    "            if 65 <= s_1 <= 69:\n",
    "                    return dic5[4]+dic5[5]+dic5[6]+dic5[7]+dic5[8]+dic5[9]+dic5[10]\n",
    "            if 70 <= s_1 <= 74:\n",
    "                    return dic5[4]+dic5[5]+dic5[6]+dic5[7]+dic5[8]+dic5[9]+dic5[10]+dic5[11]\n",
    "            if 75 <= s_1 <= 79:\n",
    "                    return dic5[4]+dic5[5]+dic5[6]+dic5[7]+dic5[8]+dic5[9]+dic5[10]+dic5[11]+dic5[12]\n",
    "            if 80 <= s_1 <= 84:\n",
    "                    return dic5[4]+dic5[5]+dic5[6]+dic5[7]+dic5[8]+dic5[9]+dic5[10]+dic5[11]+dic5[12]+dic5[13]\n",
    "            if 85 <= s_1:\n",
    "                    return dic5[4]+dic5[5]+dic5[6]+dic5[7]+dic5[8]+dic5[9]+dic5[10]+dic5[11]+dic5[12]+dic5[13]+dic5[14]\n",
    "        if 40<= s <= 44:\n",
    "            if 40 <= s_1 <= 44:\n",
    "                    return dic5[5]\n",
    "            if 45 <= s_1 <= 49:\n",
    "                    return dic5[5]+dic5[6]\n",
    "            if 50 <= s_1 <= 54:\n",
    "                    return dic5[5]+dic5[6]+dic5[7]\n",
    "            if 55 <= s_1 <= 59:\n",
    "                    return dic5[5]+dic5[6]+dic5[7]+dic5[8]\n",
    "            if 60 <= s_1 <= 64:\n",
    "                    return dic5[5]+dic5[6]+dic5[7]+dic5[8]+dic5[9]\n",
    "            if 65 <= s_1 <= 69:\n",
    "                    return dic5[5]+dic5[6]+dic5[7]+dic5[8]+dic5[9]+dic5[10]\n",
    "            if 70 <= s_1 <= 74:\n",
    "                    return dic5[5]+dic5[6]+dic5[7]+dic5[8]+dic5[9]+dic5[10]+dic5[11]\n",
    "            if 75 <= s_1 <= 79:\n",
    "                    return dic5[5]+dic5[6]+dic5[7]+dic5[8]+dic5[9]+dic5[10]+dic5[11]+dic5[12]\n",
    "            if 80 <= s_1 <= 84:\n",
    "                    return dic5[5]+dic5[6]+dic5[7]+dic5[8]+dic5[9]+dic5[10]+dic5[11]+dic5[12]+dic5[13]\n",
    "            if 85 <= s_1:\n",
    "                    return dic5[5]+dic5[6]+dic5[7]+dic5[8]+dic5[9]+dic5[10]+dic5[11]+dic5[12]+dic5[13]+dic5[14]\n",
    "        if 45<= s <=49:\n",
    "            if 45 <= s_1 <= 49:\n",
    "                    return dic5[6]\n",
    "            if 50 <= s_1 <= 54:\n",
    "                    return dic5[6]+dic5[7]\n",
    "            if 55 <= s_1 <= 59:\n",
    "                    return dic5[6]+dic5[7]+dic5[8]\n",
    "            if 60 <= s_1 <= 64:\n",
    "                    return dic5[6]+dic5[7]+dic5[8]+dic5[9]\n",
    "            if 65 <= s_1 <= 69:\n",
    "                    return dic5[6]+dic5[7]+dic5[8]+dic5[9]+dic5[10]\n",
    "            if 70 <= s_1 <= 74:\n",
    "                    return dic5[6]+dic5[7]+dic5[8]+dic5[9]+dic5[10]+dic5[11]\n",
    "            if 75 <= s_1 <= 79:\n",
    "                    return dic5[6]+dic5[7]+dic5[8]+dic5[9]+dic5[10]+dic5[11]+dic5[12]\n",
    "            if 80 <= s_1 <= 84:\n",
    "                    return dic5[6]+dic5[7]+dic5[8]+dic5[9]+dic5[10]+dic5[11]+dic5[12]+dic5[13]\n",
    "            if 85 <= s_1:\n",
    "                    return dic5[6]+dic5[7]+dic5[8]+dic5[9]+dic5[10]+dic5[11]+dic5[12]+dic5[13]+dic5[14]\n",
    "        if 50<= s <=54:\n",
    "            if 50 <= s_1 <= 54:\n",
    "                    return dic5[7]\n",
    "            if 55 <= s_1 <= 59:\n",
    "                    return dic5[7]+dic5[8]\n",
    "            if 60 <= s_1 <= 64:\n",
    "                    return dic5[7]+dic5[8]+dic5[9]\n",
    "            if 65 <= s_1 <= 69:\n",
    "                    return dic5[7]+dic5[8]+dic5[9]+dic5[10]\n",
    "            if 70 <= s_1 <= 74:\n",
    "                    return dic5[7]+dic5[8]+dic5[9]+dic5[10]+dic5[11]\n",
    "            if 75 <= s_1 <= 79:\n",
    "                    return dic5[7]+dic5[8]+dic5[9]+dic5[10]+dic5[11]+dic5[12]\n",
    "            if 80 <= s_1 <= 84:\n",
    "                    return dic5[7]+dic5[8]+dic5[9]+dic5[10]+dic5[11]+dic5[12]+dic5[13]\n",
    "            if 85 <= s_1:\n",
    "                    return dic5[7]+dic5[8]+dic5[9]+dic5[10]+dic5[11]+dic5[12]+dic5[13]+dic5[14]\n",
    "        if 55<= s <=59:\n",
    "            if 55 <= s_1 <= 59:\n",
    "                    return dic5[8]\n",
    "            if 60 <= s_1 <= 64:\n",
    "                    return dic5[8]+dic5[9]\n",
    "            if 65 <= s_1 <= 69:\n",
    "                    return dic5[8]+dic5[9]+dic5[10]\n",
    "            if 70 <= s_1 <= 74:\n",
    "                    return dic5[8]+dic5[9]+dic5[10]+dic5[11]\n",
    "            if 75 <= s_1 <= 79:\n",
    "                    return dic5[8]+dic5[9]+dic5[10]+dic5[11]+dic5[12]\n",
    "            if 80 <= s_1 <= 84:\n",
    "                    return dic5[8]+dic5[9]+dic5[10]+dic5[11]+dic5[12]+dic5[13]\n",
    "            if 85 <= s_1:\n",
    "                    return dic5[8]+dic5[9]+dic5[10]+dic5[11]+dic5[12]+dic5[13]+dic5[14]\n",
    "        if 60<= s <=64:\n",
    "            if 60 <= s_1 <= 64:\n",
    "                    return dic5[9]\n",
    "            if 65 <= s_1 <= 69:\n",
    "                    return dic5[9]+dic5[10]\n",
    "            if 70 <= s_1 <= 74:\n",
    "                    return dic5[9]+dic5[10]+dic5[11]\n",
    "            if 75 <= s_1 <= 79:\n",
    "                    return dic5[8]+dic5[9]+dic5[10]+dic5[11]+dic5[12]\n",
    "            if 80 <= s_1 <= 84:\n",
    "                    return dic5[8]+dic5[9]+dic5[10]+dic5[11]+dic5[12]+dic5[13]\n",
    "            if 85 <= s_1:\n",
    "                    return dic5[8]+dic5[9]+dic5[10]+dic5[11]+dic5[12]+dic5[13]+dic5[14]\n",
    "        if 65<= s <=69:\n",
    "            if 65 <= s_1 <= 69:\n",
    "                    return dic5[10]\n",
    "            if 70 <= s_1 <= 74:\n",
    "                    return dic5[10]+dic5[11]\n",
    "            if 75 <= s_1 <= 79:\n",
    "                    return dic5[10]+dic5[11]+dic5[12]\n",
    "            if 80 <= s_1 <= 84:\n",
    "                    return dic5[10]+dic5[11]+dic5[12]+dic5[13]\n",
    "            if 85 <= s_1:\n",
    "                    return dic5[10]+dic5[11]+dic5[12]+dic5[13]+dic5[14]\n",
    "        if 70<= s <=74:\n",
    "            if 70 <= s_1 <= 74:\n",
    "                    return dic5[11]\n",
    "            if 75 <= s_1 <= 79:\n",
    "                    return dic5[11]+dic5[12]\n",
    "            if 80 <= s_1 <= 84:\n",
    "                    return dic5[11]+dic5[12]+dic5[13]\n",
    "            if 85 <= s_1:\n",
    "                    return dic5[11]+dic5[12]+dic5[13]+dic5[14]\n",
    "        if 75<= s <=79:\n",
    "            if 75 <= s_1 <= 79:\n",
    "                    return dic5[12]\n",
    "            if 80 <= s_1 <= 84:\n",
    "                    return dic5[12]+dic5[13]\n",
    "            if 85 <= s_1:\n",
    "                    return dic5[12]+dic5[13]+dic5[14]\n",
    "        if 80<= s <=84:\n",
    "            if 80 <= s_1 <= 84:\n",
    "                    return dic5[13]\n",
    "            if 85 <= s_1:\n",
    "                    return dic5[13]+dic5[14]\n",
    "        if 85<=s:\n",
    "            if 85 <= s_1:\n",
    "                    return dic5[14]\n",
    "        \n",
    "        \n",
    "\n",
    "        \n",
    "    \n",
    "    def mheight(self):\n",
    "        h= int(input(\"희망하는 배우자 남성의 키를 입력하세요.(상관없다면 0 입력) : \"))\n",
    "        if h == 0:\n",
    "            return 100\n",
    "            print(100)\n",
    "        if h > 0 and h <= 150:\n",
    "            return ((kk[1]+kk[2]+kk[3])/kk[0])*100\n",
    "            print(((kk[1]+kk[2]+kk[3])/kk[0])*100)\n",
    "        if h > 150 and h <= 160:\n",
    "            return (kk[4]+kk[5])/kk[0]*100\n",
    "            print((kk[4]+kk[5])/kk[0]*100)\n",
    "        if h > 160 and h <= 165:\n",
    "            return (kk[6]/kk[0])*100\n",
    "            print((kk[6]/kk[0])*100)\n",
    "        if h > 165 and h <= 170:\n",
    "            return kk[7]/kk[0]*100\n",
    "            print(kk[7]/kk[0]*100)\n",
    "        if h > 170 and h <= 175:\n",
    "            return kk[8]/kk[0]*100\n",
    "            print (kk[8]/kk[0]*100)\n",
    "        if h > 175 and h <= 180:\n",
    "            return kk[9]/kk[0]*100\n",
    "            print (kk[9]/kk[0]*100)\n",
    "        if h >180 and h <= 185:\n",
    "            return (kk[10]/kk[0]*100)\n",
    "            print ((kk[10]/kk[0])*100)\n",
    "        if h > 185:\n",
    "            return (kk[11]+kk[12]+kk[13]/kk[0])*100\n",
    "            print(((kk[11]+kk[12]+kk[13])/kk[0])*100)\n",
    "        \n",
    "            \n",
    "    def wheight(self):\n",
    "        h= int(input(\"희망하는 배우자 여성의 키를 입력하세요.(상관없다면 0 입력) : \"))\n",
    "        if h == 0:\n",
    "            return 100\n",
    "            print(100)\n",
    "        if h >0 and h <= 150:\n",
    "            return b1[0]\n",
    "            print(b1[0])\n",
    "        if h >150 and h <= 155:\n",
    "            return b1[1]\n",
    "            print(b1[1])\n",
    "        if h > 155 and h <= 160:\n",
    "            return b1[2]\n",
    "            print(b1[2])\n",
    "        if h >160 and h <=165:\n",
    "            return b1[3]\n",
    "            print(b1[3])\n",
    "        if h >165 and h <=170:\n",
    "            return b1[4]\n",
    "            print(b1[4])\n",
    "        if h >170:\n",
    "            return b1[5]\n",
    "            print(b1[5])\n",
    "        \n",
    "            \n",
    "    def look(self):\n",
    "        while True:\n",
    "            a=int(input(\"희망하는 배우자의 외모 수준은 상위 몇 %? \"))\n",
    "            if a>100:\n",
    "                print(\"잘못입력하셨습니다.\")\n",
    "        \n",
    "            if a<=100:\n",
    "                return a\n",
    "                break\n",
    "    \n",
    "    #def edu(self):\n",
    "        #print(\"희망하는 배우자의 학력을 선택하세요. 1. 대졸 2. 고졸 3. 중졸\")\n",
    "        \n",
    "    def msal(self):\n",
    "        a=int(input(\"희망하는 남자 배우자의 연봉 수준을 선택하세요. 1.4500만원 이상 2.3500만원 이상 3.2800만원 이상 4.상관없음 : \"))\n",
    "        if a == 1:\n",
    "            return ms1\n",
    "            print(ms1)\n",
    "        if a == 2:\n",
    "            return ms2\n",
    "            print(ms2)\n",
    "        if a == 3:\n",
    "            return ms3\n",
    "            print(ms3)\n",
    "        if a == 4:\n",
    "            return 100\n",
    "            print(100)\n",
    "      \n",
    "    def wsal(self):\n",
    "        a=int(input(\"희망하는 여자 배우자의 연봉 수준을 선택하세요. 1.4500만원 이상 2.3500만원 이상 3.2800만원 이상 4.상관없음 : \"))\n",
    "        if a == 1:\n",
    "            return ws1\n",
    "            print(ws1)\n",
    "        if a == 2:\n",
    "            return ws2\n",
    "            print(ws2)\n",
    "        if a == 3:\n",
    "            return ws3\n",
    "            print(ws3)\n",
    "        if a == 4:\n",
    "            return 100\n",
    "            print(100)\n",
    "        \n",
    "    def mex(self):\n",
    "        a=int(input(\"희망하는 남자 배우자의 운동 유무 1.유 2.무 3.상관없음 : \"))\n",
    "        if a == 1:\n",
    "            return exx[0]\n",
    "            print(exx[0])\n",
    "        if a == 2:\n",
    "            return exx[1]\n",
    "            print(exx[1])\n",
    "        if a == 3:\n",
    "            return 100\n",
    "            print(100)\n",
    "        \n",
    "        \n",
    "        \n",
    "    def wex(self):\n",
    "        a=int(input(\"희망하는 여자 배우자의 운동 유무 1.유 2.무 3.상관없음 : \"))\n",
    "        if a ==1:\n",
    "            return exx[2]\n",
    "            print(exx[2])\n",
    "        if a ==2:\n",
    "            return exx[3]\n",
    "            print(exx[3])\n",
    "        if a ==3:\n",
    "            return 100\n",
    "            print(100)\n",
    "            \n",
    "        \n",
    "    def smoke(self):\n",
    "        s= int(input(\"배우자의 흡연 여부 1.흡연자였으면 좋겠다. 2.비흡연자였으면 좋겠다. 3.상관없음 : \"))\n",
    "        if s == 1:\n",
    "            return list_dic4[0]\n",
    "            print(list_dic4[0])\n",
    "        if s == 2:\n",
    "            return list_dic4[1]\n",
    "            print(list_dic4[1])\n",
    "        if s == 3:\n",
    "            return 100\n",
    "            print(100)\n",
    "            \n",
    "    def alc(self):\n",
    "        a=int(input(\"배우자의 음주 여부 1.술을 마시는 사람이면 좋겠다. 2.술을 안 마시면 좋겠다. 3.상관없음 : \"))\n",
    "        if a == 1:\n",
    "            return alcohol1\n",
    "            print(alcohol1)\n",
    "        if a == 2:\n",
    "            return 100-alcohol1\n",
    "            print(100-alcohol1)\n",
    "        if a == 3:\n",
    "            return 100\n",
    "            print(100)\n",
    "    \n",
    "    def crime(self):\n",
    "        return crime_[1]\n",
    "\n",
    "    \n",
    "class C():\n",
    "    def result(self):    \n",
    "        a=ht.wage()\n",
    "        b=ht.look()\n",
    "        print(a+b)\n",
    "\n",
    "#Class woman()\n",
    "ht = Condition()\n",
    "\n",
    "from matplotlib import font_manager, rc\n",
    "font_name = font_manager.FontProperties(fname=\"c:/Windows/Fonts/malgun.ttf\").get_name()\n",
    "rc('font', family=font_name)\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "sex=input(\"당신의 성별은 무엇입니까? 1.남자 2.여자 :\")\n",
    "\n",
    "\n",
    "if sex == \"1\":\n",
    "    \n",
    "    X=['총 비율','음주 여부 조건','흡연 여부 조건','운동 유무 조건','연봉 조건','외모 조건','키 조건','나이 조건','총 여자 인구 수']\n",
    "    Y=[0,0,0,0,0,0,0,0,100]\n",
    "    plt.barh(X, Y)\n",
    "    plt.show()\n",
    " \n",
    "    a=ht.wage()\n",
    "    print(\"선택한 나이의 미혼자 비율\",a,\"%\\n\")\n",
    "    X=['총 비율','음주 여부 조건','흡연 여부 조건','운동 유무 조건','연봉 조건','외모 조건','키 조건','나이 조건','총 여자 인구 수']\n",
    "    Y=[0,0,0,0,0,0,0,a,100]\n",
    "    plt.barh(X, Y)\n",
    "    plt.show()\n",
    "    \n",
    "    b=ht.wheight()\n",
    "    print(\"선택한 키를 가진 여성의 비율\",b,\"%\\n\")\n",
    "    X=['총 비율','음주 여부 조건','흡연 여부 조건','운동 유무 조건','연봉 조건','외모 조건','키 조건','나이 조건','총 여자 인구 수']\n",
    "    Y=[0,0,0,0,0,0,(a/100)*(b/100)*100,a,100]\n",
    "    b_graph=(a/100)*(b/100)*100\n",
    "    plt.barh(X, Y)\n",
    "    plt.show()\n",
    "    print(\"지금까지 조건들의 확률\",(a/100)*(b/100)*100,\"%\")\n",
    "    print(\"\\n\\n\")\n",
    "    \n",
    "    c=ht.look()\n",
    "    print(\"선택한 외모 기준\",c,\"%\\n\")\n",
    "    X=['총 비율','음주 여부 조건','흡연 여부 조건','운동 유무 조건','연봉 조건','외모 조건','키 조건','나이 조건','총 여자 인구 수']\n",
    "    Y=[0,0,0,0,0,(a/100)*(b/100)*(c/100)*100,(a/100)*(b/100)*100,a,100]\n",
    "    c_graph=(a/100)*(b/100)*(c/100)*100\n",
    "    plt.barh(X, Y)\n",
    "    plt.show()\n",
    "    print(\"지금까지 조건들의 확률\",(a/100)*(b/100)*(c/100)*100,\"%\")\n",
    "    print(\"\\n\\n\")\n",
    "    \n",
    "    d=ht.wsal()\n",
    "    print(\"선택한 연봉수준을 가진 여성의 비율\",d,\"%\\n\")\n",
    "    X=['총 비율','음주 여부 조건','흡연 여부 조건','운동 유무 조건','연봉 조건','외모 조건','키 조건','나이 조건','총 여자 인구 수']\n",
    "    Y=[0,0,0,0,(a/100)*(b/100)*(c/100)*(d/100)*100,(a/100)*(b/100)*(c/100)*100,(a/100)*(b/100)*100,a,100]\n",
    "    d_graph=(a/100)*(b/100)*(c/100)*(d/100)*100\n",
    "    plt.barh(X, Y)\n",
    "    plt.show()\n",
    "    print(\"지금까지 조건들의 확률\",(a/100)*(b/100)*(c/100)*(d/100)*100,\"%\")\n",
    "    print(\"\\n\\n\")\n",
    "    \n",
    "    e=ht.wex()\n",
    "    print(\"선택한 조건을 만족하는 여성의 비율\",e,\"%\\n\")\n",
    "    X=['총 비율','음주 여부 조건','흡연 여부 조건','운동 유무 조건','연봉 조건','외모 조건','키 조건','나이 조건','총 여자 인구 수']\n",
    "    Y=[0,0,0,(a/100)*(b/100)*(c/100)*(d/100)*(e/100)*100,(a/100)*(b/100)*(c/100)*(d/100)*100,(a/100)*(b/100)*(c/100)*100,(a/100)*(b/100)*100,a,100]\n",
    "    e_graph=(a/100)*(b/100)*(c/100)*(d/100)*(e/100)*100\n",
    "    plt.barh(X, Y)\n",
    "    plt.show()\n",
    "    print(\"지금까지 조건들의 확률\",(a/100)*(b/100)*(c/100)*(d/100)*(e/100)*100,\"%\")\n",
    "    print(\"\\n\\n\")\n",
    "    \n",
    "    f=ht.smoke()\n",
    "    print(\"선택한 조건을 만족하는 비율\",f,\"%\\n\")\n",
    "    X=['총 비율','음주 여부 조건','흡연 여부 조건','운동 유무 조건','연봉 조건','외모 조건','키 조건','나이 조건','총 여자 인구 수']\n",
    "    Y=[0,0,(a/100)*(b/100)*(c/100)*(d/100)*(e/100)*(f/100)*100,(a/100)*(b/100)*(c/100)*(d/100)*(e/100)*100,(a/100)*(b/100)*(c/100)*(d/100)*100,(a/100)*(b/100)*(c/100)*100,(a/100)*(b/100)*100,a,100]\n",
    "    f_graph=(a/100)*(b/100)*(c/100)*(d/100)*(e/100)*(f/100)*100\n",
    "    plt.barh(X, Y)\n",
    "    plt.show()\n",
    "    print(\"지금까지 조건들의 확률\",(a/100)*(b/100)*(c/100)*(d/100)*(e/100)*(f/100)*100,\"%\")\n",
    "    print(\"\\n\\n\")\n",
    "    \n",
    "    g=ht.alc()\n",
    "    print(\"선택한 조건을 만족하는 비율\",g,\"%\\n\")\n",
    "    X=['총 비율','음주 여부 조건','흡연 여부 조건','운동 유무 조건','연봉 조건','외모 조건','키 조건','나이 조건','총 여자 인구 수']\n",
    "    Y=[0,(a/100)*(b/100)*(c/100)*(d/100)*(e/100)*(f/100)*(g/100)*100,(a/100)*(b/100)*(c/100)*(d/100)*(e/100)*(f/100)*100,(a/100)*(b/100)*(c/100)*(d/100)*(e/100)*100,(a/100)*(b/100)*(c/100)*(d/100)*100,(a/100)*(b/100)*(c/100)*100,(a/100)*(b/100)*100,a,100]\n",
    "    g_graph=(a/100)*(b/100)*(c/100)*(d/100)*(e/100)*(f/100)*(g/100)*100\n",
    "    plt.barh(X, Y)\n",
    "    plt.show()\n",
    "    print(\"지금까지 조건들의 확률\",(a/100)*(b/100)*(c/100)*(d/100)*(e/100)*(f/100)*(g/100)*100,\"%\")\n",
    "    print(\"\\n\\n\")\n",
    "    \n",
    "    h=ht.crime()\n",
    "    print(\"전과자 제외 비율 \",h,\"%\")\n",
    "    X=['총 비율','음주 여부 조건','흡연 여부 조건','운동 유무 조건','연봉 조건','외모 조건','키 조건','나이 조건','총 여자 인구 수']\n",
    "    Y=[(a/100)*(b/100)*(c/100)*(d/100)*(e/100)*(f/100)*(g/100)*(h/100)*100,(a/100)*(b/100)*(c/100)*(d/100)*(e/100)*(f/100)*(g/100)*100,(a/100)*(b/100)*(c/100)*(d/100)*(e/100)*(f/100)*100,(a/100)*(b/100)*(c/100)*(d/100)*(e/100)*100,(a/100)*(b/100)*(c/100)*(d/100)*100,(a/100)*(b/100)*(c/100)*100,(a/100)*(b/100)*100,a,100]\n",
    "    h_graph=(a/100)*(b/100)*(c/100)*(d/100)*(e/100)*(f/100)*(g/100)*(h/100)*100\n",
    "    plt.barh(X, Y)\n",
    "    plt.show()\n",
    "    plt.plot(['Sex','age','height','Look','Sal','exercise','Smoke','Alcohol','Crime','Result'],[100,a,b_graph,c_graph,d_graph,e_graph,f_graph,g_graph,h_graph,h_graph])\n",
    "    plt.show()\n",
    "    print(\"\\n\")\n",
    "    print(\"대구광역시 총 여자 수 : 1,213,338\")\n",
    "    print(\"당신이 원하는 조건을 만족할 확률\",end=\" \")\n",
    "    cc=((a/100)*(b/100)*(c/100)*(d/100)*(e/100)*(f/100)*(g/100)*(h/100))*100\n",
    "    print(cc,'%')\n",
    "    print(\"당신이 원하는 조건을 만족하는 여성의 수 : \",round(1213338*(cc/100),2),\"명\")\n",
    "    \n",
    "if sex == \"2\":\n",
    "    \n",
    "    X=['총 비율','음주 여부 조건','흡연 여부 조건','운동 유무 조건','연봉 조건','외모 조건','키 조건','나이 조건','총 남자 인구 수']\n",
    "    Y=[0,0,0,0,0,0,0,0,100]\n",
    "    plt.barh(X, Y)\n",
    "    plt.show()\n",
    "    \n",
    "    a=ht.mage()\n",
    "    print(\"선택한 나이의 미혼자 비율\",a,\"%\\n\")\n",
    "    X=['총 비율','음주 여부 조건','흡연 여부 조건','운동 유무 조건','연봉 조건','외모 조건','키 조건','나이 조건','총 여자 인구 수']\n",
    "    Y=[0,0,0,0,0,0,0,a,100]\n",
    "    plt.barh(X, Y)\n",
    "    plt.show()\n",
    "    \n",
    "    b=ht.mheight()\n",
    "    print(\"선택한 키를 가진 남성의 비율\",b,\"%\\n\")\n",
    "    X=['총 비율','음주 여부 조건','흡연 여부 조건','운동 유무 조건','연봉 조건','외모 조건','키 조건','나이 조건','총 남자 인구 수']\n",
    "    Y=[0,0,0,0,0,0,(a/100)*(b/100)*100,a,100]\n",
    "    b_graph=(a/100)*(b/100)*100\n",
    "    plt.barh(X, Y)\n",
    "    plt.show()\n",
    "    print(\"지금까지 조건들의 확률\",(a/100)*(b/100)*100,\"%\")\n",
    "    print(\"\\n\\n\")\n",
    "    \n",
    "    c=ht.look()\n",
    "    print(\"선택한 외모 기준\",c,\"%\\n\")\n",
    "    X=['총 비율','음주 여부 조건','흡연 여부 조건','운동 유무 조건','연봉 조건','외모 조건','키 조건','나이 조건','총 남자 인구 수']\n",
    "    Y=[0,0,0,0,0,(a/100)*(b/100)*(c/100)*100,(a/100)*(b/100)*100,a,100]\n",
    "    c_graph=(a/100)*(b/100)*(c/100)*100\n",
    "    plt.barh(X, Y)\n",
    "    plt.show()\n",
    "    print(\"지금까지 조건들의 확률\",(a/100)*(b/100)*(c/100)*100,\"%\")\n",
    "    print(\"\\n\\n\")\n",
    "    \n",
    "    d=ht.msal()\n",
    "    print(\"선택한 연봉수준을 가진 여성의 비율\",d,\"%\\n\")\n",
    "    X=['총 비율','음주 여부 조건','흡연 여부 조건','운동 유무 조건','연봉 조건','외모 조건','키 조건','나이 조건','총 남자 인구 수']\n",
    "    Y=[0,0,0,0,(a/100)*(b/100)*(c/100)*(d/100)*100,(a/100)*(b/100)*(c/100)*100,(a/100)*(b/100)*100,a,100]\n",
    "    d_graph=(a/100)*(b/100)*(c/100)*(d/100)*100\n",
    "    plt.barh(X, Y)\n",
    "    plt.show()\n",
    "    print(\"지금까지 조건들의 확률\",(a/100)*(b/100)*(c/100)*(d/100)*100,\"%\")\n",
    "    print(\"\\n\\n\")\n",
    "    \n",
    "    e=ht.mex()\n",
    "    print(\"선택한 조건을 만족하는 남성의 비율\",e,\"%\\n\")\n",
    "    X=['총 비율','음주 여부 조건','흡연 여부 조건','운동 유무 조건','연봉 조건','외모 조건','키 조건','나이 조건','총 남자 인구 수']\n",
    "    Y=[0,0,0,(a/100)*(b/100)*(c/100)*(d/100)*(e/100)*100,(a/100)*(b/100)*(c/100)*(d/100)*100,(a/100)*(b/100)*(c/100)*100,(a/100)*(b/100)*100,a,100]\n",
    "    e_graph=(a/100)*(b/100)*(c/100)*(d/100)*(e/100)*100\n",
    "    plt.barh(X, Y)\n",
    "    plt.show()\n",
    "    print(\"지금까지 조건들의 확률\",(a/100)*(b/100)*(c/100)*(d/100)*(e/100)*100,\"%\")\n",
    "    print(\"\\n\\n\")\n",
    "    \n",
    "    f=ht.smoke()\n",
    "    print(\"선택한 조건을 만족하는 비율\",f,\"%\\n\")\n",
    "    X=['총 비율','음주 여부 조건','흡연 여부 조건','운동 유무 조건','연봉 조건','외모 조건','키 조건','나이 조건','총 남자 인구 수']\n",
    "    Y=[0,0,(a/100)*(b/100)*(c/100)*(d/100)*(e/100)*(f/100)*100,(a/100)*(b/100)*(c/100)*(d/100)*(e/100)*100,(a/100)*(b/100)*(c/100)*(d/100)*100,(a/100)*(b/100)*(c/100)*100,(a/100)*(b/100)*100,a,100]\n",
    "    f_graph=(a/100)*(b/100)*(c/100)*(d/100)*(e/100)*(f/100)*100\n",
    "    plt.barh(X, Y)\n",
    "    plt.show()\n",
    "    print(\"지금까지 조건들의 확률\",(a/100)*(b/100)*(c/100)*(d/100)*(e/100)*(f/100)*100,\"%\")\n",
    "    print(\"\\n\\n\")\n",
    "    \n",
    "    g=ht.alc()\n",
    "    print(\"선택한 조건을 만족하는 비율\",g,\"%\\n\")\n",
    "    X=['총 비율','음주 여부 조건','흡연 여부 조건','운동 유무 조건','연봉 조건','외모 조건','키 조건','나이 조건','총 남자 인구 수']\n",
    "    Y=[0,(a/100)*(b/100)*(c/100)*(d/100)*(e/100)*(f/100)*(g/100)*100,(a/100)*(b/100)*(c/100)*(d/100)*(e/100)*(f/100)*100,(a/100)*(b/100)*(c/100)*(d/100)*(e/100)*100,(a/100)*(b/100)*(c/100)*(d/100)*100,(a/100)*(b/100)*(c/100)*100,(a/100)*(b/100)*100,a,100]\n",
    "    g_graph=(a/100)*(b/100)*(c/100)*(d/100)*(e/100)*(f/100)*(g/100)*100\n",
    "    plt.barh(X, Y)\n",
    "    plt.show()\n",
    "    print(\"지금까지 조건들의 확률\",(a/100)*(b/100)*(c/100)*(d/100)*(e/100)*(f/100)*(g/100)*100,\"%\")\n",
    "    print(\"\\n\\n\")\n",
    "    \n",
    "    h=ht.crime()\n",
    "    print(\"전과자 제외 비율 \",h,\"%\")\n",
    "    X=['총 비율','음주 여부 조건','흡연 여부 조건','운동 유무 조건','연봉 조건','외모 조건','키 조건','나이 조건','총 여자 인구 수']\n",
    "    Y=[(a/100)*(b/100)*(c/100)*(d/100)*(e/100)*(f/100)*(g/100)*(h/100)*100,(a/100)*(b/100)*(c/100)*(d/100)*(e/100)*(f/100)*(g/100)*100,(a/100)*(b/100)*(c/100)*(d/100)*(e/100)*(f/100)*100,(a/100)*(b/100)*(c/100)*(d/100)*(e/100)*100,(a/100)*(b/100)*(c/100)*(d/100)*100,(a/100)*(b/100)*(c/100)*100,(a/100)*(b/100)*100,a,100]\n",
    "    h_graph=(a/100)*(b/100)*(c/100)*(d/100)*(e/100)*(f/100)*(g/100)*(h/100)*100\n",
    "    plt.barh(X, Y)\n",
    "    plt.show()\n",
    "    plt.plot(['Sex','age','height','Look','Sal','exercise','Smoke','Alcohol','Crime','Result'],[100,a,b_graph,c_graph,d_graph,e_graph,f_graph,g_graph,h_graph,h_graph])\n",
    "    plt.show()\n",
    "    \n",
    "    print(\"\\n\")\n",
    "    print(\"대구광역시 총 남자 수 : 1,179,580\")\n",
    "    print(\"당신이 원하는 조건을 만족할 확률\",end=\" \")\n",
    "    cc=((a/100)*(b/100)*(c/100)*(d/100)*(e/100)*(f/100)*(g/100)*(h/100))*100\n",
    "    print(cc,'%')\n",
    "    print(\"당신이 원하는 조건을 만족하는 남성의 수 : \",round(1179580*(cc/100),2),\"명\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
